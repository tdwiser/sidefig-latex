%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  based on INSBOX --- macros for inserting pictures into paragraphs  %
%      by Micha\l{} Gulczy\'nski, Szczecin, Jan 1996 / Feb 1998       %
%                    mgulcz@we.tuniv.szczecin.pl                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\NeedsTeXFormat{LaTeX2e}[1994/06/01]

\ProvidesPackage{sidefig}[2018/03/19 v0.3rc For wrapping text around figures and other boxes placed to one side or the other. Designed to wrap around listed environments.]

\RequirePackage{afterpage}

\ProcessOptions\relax

\newif\if@sidefigdebug\@sidefigdebugfalse
\def\@debug#1{\if@sidefigdebug\typeout{#1}\else\relax\fi}

\def\@beginsidefigmark{0}
\def\@endsidefigmark{1}


%%%%% BEGIN insbox internal code, relatively unmodified

\newdimen\@InsertBoxMargin
\@InsertBoxMargin = 2mm
%
%  definition of \ParShape, an inproved version of plain \parshape
%
\newcount\@numlines    % sum: m_1+...+m_n
\newcount\@linesleft   % counter used when reading lines of \ParShape
\def\ParShape{%
    \@numlines = 0
    \def\@parshapedata{ }% here we'll collect data for plain \parshape
    \afterassignment\@beginParShape
    \@linesleft
}%
\def\@beginParShape{%
    \ifnum \@linesleft = 0
      \let\@whatnext = \@endParShape
    \else
      \let\@whatnext = \@readnextline
    \fi
    \@whatnext
}%
\def\@endParShape{%
    \global\parshape = \@numlines \@parshapedata
}%
\def\@readnextline#1 #2 #3 {% #1 #2 #3 are: m_i, leftskip_i, rightskip_i
    \ifnum #1 > 0
      \bgroup  % I want to keep changes of \dimen0 and \count0 local
        \dimen0 = \hsize
        \advance \dimen0 by -#2  % \parshape requires left skip and
        \advance \dimen0 by -#3  % _length_of_line_ (not right skip!)
        \count0 = 0
        \loop
          \global\edef\@parshapedata{%
            \@parshapedata    % add to \@parshapedata:
            #2                % left skip
            \space            % a space
            \the\dimen0       % length of line
            \space            % another space
          }%
          \advance \count0 by 1
          \ifnum \count0 < #1
        \repeat
      \egroup
      \advance \@numlines by #1
    \fi
    \advance \@linesleft by -1
    \@beginParShape
}%
%
%  \InsertBoxC, \InsertBoxL, \InsertBoxR
%
\newbox\@boxcontent     % box containing the picture to be inserted
\newcount\@numnormal    % number of leading lines to typeset normally
\newdimen\@framewidth   % width of the frame
\newdimen\@wherebottom  % position of frame's bottom
\newif\if@byframe       % true if we are just beside the frame
\@byframefalse
%

%%%%% END insbox internal code

%%% new sidefig definitions
\newdimen\@wheretop
\newdimen\@lastheight
\newif\if@bottomout
\@bottomoutfalse
\newif\if@indented
\@indentedtrue

\newif\if@itemnext
\@itemnextfalse

\let\@everypar\everypar % save to restore later

\def\ps@sidefig{\@debug{in ps@sidefig}\local@restore@} %use this to protect headers and footers when sidefigs go across page break


%%%%% code to be run at the beginning of each par (using everypar) to set the parshape.
%%%%%   includes checks for being inside a list, and combines the parshapes appropriately.
\def\@setupsidepar#1{%
	\@debug{in @setupsidepar: pt \the\pagetotal, top \the\@wheretop, bottom \the\@wherebottom, goal \the\pagegoal, th \the\textheight}%
	\if@byframe%
    % are we already below the bottom of the box?
    \ifdim \pagetotal < \@wherebottom
      % no...
	  \@debug{@setupsidepar working...}%
      \bgroup  % to keep some changes local
        % let's calculate parameters for \ParShape
        \dimen0 = \@wherebottom
        \advance \dimen0 by -\pagetotal
        \divide \dimen0 by \baselineskip
        \count1 = \dimen0
        \advance \count1 by 1
        \advance \count1 by -\@numnormal
		\ifnum \@listdepth >0 \dimen1 = \@totalleftmargin \else \dimen1 = 0cm \fi
        \ifnum #1 = 1
          \ParShape = 3
                      {\the\@numnormal}   {\the\dimen1}   0cm
                      {\the\count1}       {\the\dimen1}  {\the\@framewidth}
                      1                   {\the\dimen1}   0cm
        \else
		\dimen2 = \dimen1 \advance \dimen2 \@framewidth 
          \ParShape = 3
                      {\the\@numnormal}   {\the\dimen1}        0cm
                      {\the\count1}       {\the\dimen2}        0cm
                      1                   {\the\dimen1}        0cm
        \fi
      \egroup
    \else
	% yes!
	  \@restore@    % it's time to end everything (...just for this sidefig)
    \fi  % \end <@wherebottom
	\else \@restore@ \fi %\end if@byframe
}

\def\@detectindent{
  \ifnum\@listdepth =0%
  \leavevmode\setbox0=\lastbox%
  \par%go back to vmode for assembling the sidefig
  \@debug{checking lastbox, wd \the\wd0}%
  \ifdim\wd0 >0pt \global\@indentedtrue \else \global\@indentedfalse \fi%
  \else\@debug{not checking lastbox}%
  \global\@indentedfalse%
  \fi%
}

%%%%% rewritten \@@InsertBox from insbox to use our helper function
%%%%%   defs \everypar to make sure that it still affects lists
\def\@@InsertBox#1#2#3{%
  % \if@bottomout \clearpage \fi %a second box after a bottomed-out box should just break the page. Or should it? Improved handling seems to negate some need for this...
  \global\@bottomoutfalse%
  \global\@byframetrue%
  % \@wherebottom = \pagetotal + (\@numnormal * \baselineskip) +
  %                 (height of \@boxcontent) + (2 * \@InsertBoxMargin)
  \bgroup
  \dimen0 = \baselineskip
  \multiply \dimen0 by \@numnormal %%% \@numnormal = 0, this feature is not list compatible
  \advance \dimen0 by 2\@InsertBoxMargin
  \advance \dimen0 by \ht\@boxcontent
  \advance \dimen0 by \pagetotal
  % I have no idea why, but \InsertBox called at the top of a page
  % calculates space for the box one line too big
  \ifdim \pagetotal = 0cm
    \advance \dimen0 by -\baselineskip  % ^ reduction
  \fi
  % add the correction
  \advance \dimen0 by #1\baselineskip
  \ifnum \@listdepth >0 \if@itemnext%%% calculating bottom around lists
  	\if@newlist
		\advance\dimen0 \@topsep
		% \advance\dimen0 by \topsep % who even knows the right combination
		\advance\dimen0 by \@outerparskip % thanks to random trial and error
	\else
		\advance\dimen0 by \itemsep
	\fi
  \fi\fi
  % \dimen1 = (width of \@boxcontent} + \@InsertboxMargin
  \dimen1 = \wd\@boxcontent
  \advance \dimen1 by \@InsertBoxMargin
  \global\@wherebottom=\dimen0
  \advance\dimen0 by -\pagetotal
  \global\@lastheight=\dimen0
  \global\@framewidth=\dimen1
  \global\@wheretop=\pagetotal
  \global\advance\@wheretop-\baselineskip %fudge - the typeset paragraph can often start a bit above the @wheretop due to stretchable glue
  \@debug{InsertBox: wb \the\@wherebottom, wd \the\@framewidth}%
  \egroup
  %
  \bgroup  % to keep changes of \dimen0 local
    % check if the box fits in the page
    \ifdim \pagetotal = 0cm
      \dimen0 = \vsize
    \else
      \dimen0 = \pagegoal
    \fi
    \ifdim \@wherebottom > \dimen0
      % print a warning message ...
      \immediate\write16{+--------------------------------------------------------------+}%
      \immediate\write16{| The box will not fit in the page. Please, re-edit your text. |}%
      \immediate\write16{+--------------------------------------------------------------+}%
	  \PackageWarning{sidefig}{This box will not fit on the page or may appear without word wrapping on the next page. Try inserting a page break before this box.}
      % ... and mark this place in document with a black box
      % \vrule width \overfullrule%
	  % \global\@wherebottom\dimen0 % prevent the current parshape running over into the next page
	  % \global\advance\@wherebottom-\baselineskip
	  \global\@bottomouttrue
	  \global\@specialpagetrue
	  \gdef\@specialstyle{sidefig}
	  \afterpage{\@debug{afterpage trigger: tm \topmarks1 bm \botmarks1 fm \firstmarks1 ?= \@endsidefigmark}\if{\topmarks1}\@endsidefigmark\@debug{restoring after endsidefig...}\@restore@\else\@debug{trying to compensate...}\global\advance\@wherebottom-\textheight\global\@wheretop 0pt\@setupsidepar{#2}\fi\global\@bottomoutfalse}% prevent cutout from affecting new pars next page
	  \marks1{\@beginsidefigmark}%
	  \vbox to 0pt{~}
	  \pagebreak[2] % allow but not require latex to break the page here
    \fi
  \egroup
  % \prevgraf = 0
	%   \ifnum \@listdepth >0
	%   	\if@newlist\else
	% 	% \hskip -\@totalleftmargin
	% \fi
	%   \fi
  \dimen0=\ht\@boxcontent
  \advance\dimen0 by \@InsertBoxMargin
  \dimen1=0pt
  \ifnum \@listdepth >0 \if@itemnext
    	\if@newlist\@debug{newlist: \the\partopsep \the\topsep \the\parskip \the\@outerparskip}
    		\advance\dimen1 \@topsep
	  		\advance\dimen1 \@outerparskip
    	\else
    		\advance\dimen1 \itemsep
    	\fi
  	% \else
  		% \advance\dimen1 \parskip
    \fi\fi
	\advance\dimen0\dimen1
  % insert the box in the left (if #2 = 0) or in the right (if #2 = 1)
  % \rule{5em}{1pt}
  \vbox to \dimen0{%
  	\vglue\dimen1%
    % \dimen0 = \baselineskip%
%     \multiply \dimen0 by \@numnormal
%     \advance \dimen0 by -\baselineskip
%% \setbox0 = \hbox{y}%
	% \vskip \dp0
    % \vskip \dimen0
     \vskip \@InsertBoxMargin%
	\ifnum #2 = 1%
      \hbox to \hsize{\hss \box\@boxcontent}%
    \else%
	  % \ifnum \@listdepth >0
% 	  \vtop{\noindent \hskip -\@totalleftmargin \box\@boxcontent}
% 	  \else
      \hbox{\box\@boxcontent}%
	  % \fi
    \fi%
    \vss%
  }%
  \if@bottomout\marks1{\@endsidefigmark}\fi%
  \@debug{the dimen0 = \the\dimen0}%
  \nobreak\vglue -\dimen0%
  % I have no idea why, but this is really necessary
  % \vglue -\parskip
  % \vskip -\baselineskip
  % \vskip 0pt
  \ifnum \@listdepth >0 \if@newlist
  % 		 	   	 \vglue -\partopsep
  		 % \vglue -\@outerparskip
  %		 \vglue 0pt
  \fi
  \else
  	 \vglue -\parskip
  \fi
  \vskip 0pt
%% each following paragraph needs to be formatted properly
  \gdef\everypar##1{\@everypar{##1\@setupsidepar{#2}}} %%%% this is the magic that keeps the parshape
  % \ifnum \@listdepth =0
  \if@indented\everypar{\@debug{par}}\else\everypar{\@debug{unindent par}\hskip -\parindent\everypar{}}\fi
  % \if@bottomout\global\@byframefalse\fi
  % \else
  	 % \everypar{}
	% \fi %%%%  from being trashed by \list
  % \if@indented \else \leavevmode\noindent\ignorespaces \fi
  %
  % this breaks			  % this definition isn't very necessary --- just in case the paragraph
  % lists - not			  % following \InsertBoxL or \InsertBoxR has fewer lines that the
  % used here			  % first argument of the macro
  % \@setpar{%
  %     \endgraf
  %     \global\advance \@numnormal by -\prevgraf
  %     \ifnum \@numnormal < 0
  %       \global\@numnormal = 0
  %     \fi
  %     \prevgraf = 0
  % 	  % \everypar = {\@setupsidepar{#2}}
  % }
}%

\def\@restore@{%
	\@debug{in @restore@}%
    \global\@wherebottom = 0cm
    \global\@byframefalse
	\global\let\everypar\@everypar % restore the old everypar command
    \global\everypar = {}%
    % \global\let \par = \endgraf %again, can't use with lists
	\ifnum \@listdepth >0
	\global\parshape = 1 \@totalleftmargin \linewidth % fix up the margins if we're in a list
	\else
    \global\parshape = 1 0cm \hsize
	\fi
}

\def\local@restore@{%
	\@debug{in local@restore@}%
    \@wherebottom = 0cm
    % \@byframefalse
	\let\everypar\@everypar % restore the old everypar command
    \everypar = {}%
    % \global\let \par = \endgraf %again, can't use with lists
	\ifnum \@listdepth >0
	\parshape = 1 \@totalleftmargin \linewidth % fix up the margins if we're in a list
	\else
    \parshape = 1 0cm \hsize
	\fi
}

\let\@origitem\item
\def\item{\@debug{item}\if@byframe\else\@restore@\fi\@origitem} % if a nested list ends at the same time as the bottom of a box, it will hve the wrong indent. so tidy things up (this is probably overkill)

% \def\InsertBoxC#1{% doesn't interact well with lists
%   \leavevmode
%   \vadjust{
%     \vskip \@InsertBoxMargin
%     \hbox to \hsize{\hss#1\hss}
%     \vskip \@InsertBoxMargin
%   }
% }%
\def\@InsertBoxL#1{%
  \@numnormal = 0
  \setbox\@boxcontent = \hbox{#1}%
  \let\@side = 0
  \futurelet \@optionalparameter \@InsertBox
}
\def\@InsertBoxR#1{%
  \@numnormal = 0
  \setbox\@boxcontent = \hbox{#1}%
  \let\@side = 1
  \futurelet \@optionalparameter \@InsertBox
}%
\def\@InsertBox{%
  \ifx \@optionalparameter [
    \let\@whatnext = \@@InsertBoxCorrection
  \else
    \let\@whatnext = \@@InsertBoxNoCorrection
  \fi
  \@whatnext
}%
\def\@@InsertBoxCorrection[#1]{%
  \ifx \@side 0
    \@@InsertBox{#1}{0}{{\the\@framewidth} 0cm}%
  \else
    \@@InsertBox{#1}{1}{0cm {\the\@framewidth}}%
  \fi
}%
\def\@@InsertBoxNoCorrection{%
  \@@InsertBoxCorrection[0]%
}%

%%%% public facing commands

\def\MoveBelowBox{%
  % \par%
  \if@byframe%
    \global\advance \@wherebottom by -\pagetotal%
	\ifdim \@wherebottom > 0cm%
      \vskip \@wherebottom%
    \fi%
    \@restore@%
  \fi%
  \par% move par to end so that it uses the restored parshape and sets new pagetotal
}%

\newsavebox\@figbox
\newsavebox\@capbox
\newsavebox\@bothbox
%\csname @InsertBox#1\endcsname{#2}
\def\@@sidefig{\ifx\@nexttoken\item\@debug{before an item}\@itemnexttrue\else\@debug{not before an item}\@itemnextfalse\fi\csname @InsertBox\@pa\endcsname{\@pb}\@nexttoken}
\def\@sidefig#1#2{\def\@pa{#1}\def\@pb{#2}\afterassignment\@@sidefig\let\@nexttoken}
\def\@sidefigcaption[#1]#2#3{%
\savebox{\@figbox}{\hbox{#3}}\@debug{figbox ht \the\ht\@figbox, wd \the\wd\@figbox}%
\savebox{\@capbox}{\hbox{\vbox{\hsize=\wd\@figbox \noindent\parshape 1 0pt \wd\@figbox {\sidecapstyle{#1}\par}}}}\@debug{capbox ht \the\ht\@capbox, wd \the\wd\@capbox}%
\global\savebox{\@bothbox}{\vbox{\parskip 0pt\hsize=\wd\@figbox\noindent\usebox{\@figbox} \vskip \sidecapskip \noindent\usebox{\@capbox}}}\@debug{tmpbox ht \the\ht\@bothbox, wd \the\wd\@bothbox}%
%
\@sidefig{#2}{\usebox{\@bothbox}}%
}
\def\sidefig{\MoveBelowBox\@detectindent\@ifnextchar[{\@sidefigcaption}{\@sidefig}}

\def\sidecapstyle{\centering\small\it}
\newlength{\sidecapskip}
\setlength{\sidecapskip}{2pt}

\endinput
